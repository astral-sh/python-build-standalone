name: windows

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  FORCE_COLOR: 1

jobs:
  crate-build:
    needs:
      - generate-matrix
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.crate-build-matrix) }}
      fail-fast: false
    name: crate / ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v4

      - name: Emit rustc version
        run: |
          rustc --version > .rustc-version

      - uses: actions/cache@v4
        with:
          path: |
            C:/Rust/.cargo/registry
            C:/Rust/.cargo/git
            target
          key: ${{ runner.os }}-pythonbuild-${{ hashFiles('Cargo.lock', '.rustc-version') }}

      - name: Build
        run: |
          cargo build --release

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.crate_artifact_name }}
          path: target/release/pythonbuild.exe

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      crate-build-matrix: ${{ steps.set-matrix.outputs.crate-build-matrix }}
      any_builds: ${{ steps.set-matrix.outputs.any_builds }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch history for subsequent `git diff`

      - name: Set up Python
        uses: astral-sh/setup-uv@v4

      - name: Get pull request labels
        id: get-labels
        run: |
          # Convert GitHub labels array to comma-separated string
          LABELS=$(echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | jq -r 'join(",")')
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Check if the `pythonbuild` crate changed
        id: check-pythonbuild
        env:
          BASE_REF: ${{ github.event.pull_request.base.ref || 'main' }}
        run: |
          merge_base=$(git merge-base HEAD "origin/${BASE_REF}")
          if git diff --quiet "${merge_base}...HEAD" -- ':src/*.rs'; then
              echo "changed=false" >> "$GITHUB_OUTPUT"
          else
              echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate build matrix
        id: set-matrix
        run: |
          uv run ci-matrix.py --platform windows --labels '${{ steps.get-labels.outputs.labels }}' ${{ (steps.check-pythonbuild.outputs.changed == 'true' || github.ref == 'refs/heads/main') && '--force-crate-build' || '' }} > matrix.json
          
          # Extract python-build matrix
          echo "matrix=$(jq -c '."python-build"' matrix.json)" >> $GITHUB_OUTPUT
          echo "crate-build-matrix=$(jq -c '."crate-build"' matrix.json)" >> $GITHUB_OUTPUT
          
          # Display the matrix for debugging too
          cat matrix.json | jq

          if jq -e '."python-build".include | length > 0' matrix.json > /dev/null; then
            # Build matrix has entries
            echo "any_builds=true" >> $GITHUB_OUTPUT
          else
            # Build matrix is empty
            echo "any_builds=false" >> $GITHUB_OUTPUT
          fi

  build:
    timeout-minutes: 60
    needs:
      - generate-matrix
      - crate-build
    # Permissions used for actions/attest-build-provenance
    permissions:
      id-token: write
      attestations: write
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    name: ${{ matrix.target_triple }} / ${{ matrix.python }} / ${{ matrix.build_options }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cygwin Environment
        uses: cygwin/cygwin-install-action@49f298a7ebb00d4b3ddf58000c3e78eff5fbd6b9 # v2
        with:
          packages: autoconf automake libtool

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Download pythonbuild Executable
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.crate_artifact_name }}

      # We need to do this before we activate the VC++ environment or else binary packages
      # don't get compiled properly.
      - name: Bootstrap Python environment
        run: |
          py.exe -3.12 build-windows.py --help

      - name: Build
        if: ${{ ! matrix.dry-run }}
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\${{ matrix.vcvars }}"
          py.exe -3.12 build-windows.py --python cpython-${{ matrix.python }} --sh c:\cygwin\bin\sh.exe --options ${{ matrix.build_options }}

      - name: Generate attestations
        uses: actions/attest-build-provenance@v2
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          subject-path: dist/*

      - name: Upload Distributions
        uses: actions/upload-artifact@v4
        with:
          name: cpython-${{ matrix.python }}-${{ matrix.vcvars }}-${{ matrix.build_options }}
          path: dist/*

      - name: Validate Distribution
        if: ${{ ! matrix.dry-run }}
        run: |
          $Dists = Resolve-Path -Path "dist/*.tar.zst" -Relative
          .\pythonbuild.exe validate-distribution --run $Dists
